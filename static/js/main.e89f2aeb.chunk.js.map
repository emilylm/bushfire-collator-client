{"version":3,"sources":["components/InteractiveMap.js","enums.js","components/MapFormStyles.js","components/MapForm.js","components/Stats.js","pages/Homepage.js","layouts/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["computeRadius","size","Math","sqrt","PI","InteractiveMap","props","onFeatureGroupAdd","bounds","refs","circle","leafletElement","getBounds","bounds2","circle2","getSouthWest","wrap","getNorthEast","setState","rectangleBounds","map","fitBounds","rec","setBounds","state","lat","lng","zoom","maxSize","maxRadius","polygon","radius","bind","prevProps","this","position","Map","ref","zoomSnap","center","FeatureGroup","onAdd","Circle","key","fillColor","color","Rectangle","TileLayer","attribution","url","Component","STATES","NSW","abr","label","description","VIC","AGG","MONTHS","1","2","3","4","5","6","7","8","9","10","11","12","CITIES","MEL","name","SYD","BNE","PER","ADL","DRW","HBA","PAR","LCY","NYC","customStylesCity","container","styles","width","maxHeight","height","control","isFocused","isDisabled","minHeight","backgroundColor","borderRadius","boxShadow","borderWidth","borderStyle","borderColor","paddingLeft","paddingRight","option","isSelected","fontSize","paddingTop","paddingBottom","input","singleValue","valueContainer","padding","indicatorsContainer","indicatorSeparator","dropdownIndicator","placeholder","menu","provided","zIndex","customStylesState","getCityOptions","cityOptions","Object","keys","push","value","console","log","JSON","stringify","getStateOptions","stateOptions","MapForm","updateCityOption","currentCityOption","updateCitySelection","updateStateOption","currentStateOption","updateStateSelection","options","target","city","Form","inline","FormGroup","className","Label","id","onChange","React","getDateString","dateString","msec","Date","parse","d","month","getMonth","day","getDate","year","getFullYear","toString","substring","date","hour","getHours","minute","getMinutes","join","Stats","data","currentFires","area","total","toFixed","toLocaleString","undefined","maximumFractionDigits","dateGenerated","isOpen","toggleCard","first","setTimeout","toUpperCase","type","onClick","class","small","borderless","count","wildfire","ORDERS","aggregate","nsw","vic","updateOrder","order","unshift","splice","findIndex","item","StatsList","repos","staggerDurationBy","duration","enterAnimation","leaveAnimation","Homepage","getDataAll","getData","fetchJson","prevOptions","Promise","all","fetch","response","ok","json","Error","query","fluid","Navbar","toggleCollapse","dark","expand","to","navbar","right","icon","fab","exact","path","App","Navigation","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e89f2aeb.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Circle as LeafletElement} from 'leaflet';\nimport { Map, TileLayer, Marker, Popup, Polygon, Circle, FeatureGroup, Rectangle } from \"react-leaflet\";\nimport { computeDestinationPoint, getAreaOfPolygon } from 'geolib';\n\nfunction computeRadius (size) {\n  //return Math.sqrt(size*10000.00)/2.00\n  return Math.sqrt(size*10000.00 / Math.PI)\n}\n\nfunction computePolygon (lat, lng, size){\n\n\n  /*\n  console.log(\"lat, lng, size\", lat, lng, size)\n  const len = Math.sqrt(size*10000.00)/2.00\n  const pointNorth = computeDestinationPoint(\n      { latitude: lat, longitude: lng },\n      len,\n      0\n  );\n  const point1 = computeDestinationPoint(\n      pointNorth,\n      len,\n      90\n  );\n  const point2 = computeDestinationPoint(\n      point1,\n      len*2,\n      180\n  );\n  const point3 = computeDestinationPoint(\n      point2,\n      len*2,\n      270\n  );\n  const point4 = computeDestinationPoint(\n      point3,\n      len*2,\n      0\n  );\n  const polygon = [[point1.latitude, point1.longitude], [point2.latitude, point2.longitude],\n  [point3.latitude, point3.longitude], [point4.latitude, point4.longitude]]\n*/\n  //console.log(\"points\", JSON.stringify(point))\n\n\n/*\n  let polygon = []\n  console.log(\"lat, lng, size\", lat, lng, size)\n  const len = Math.sqrt(size*10000.00)/2.00\n\n  let angle = 45;\n  let angleRad = 45.00*Math.PI/180.00\n  const hypot = len / (Math.cos(angleRad))\n  console.log(\"length, hypot\", len, hypot)\n  console.log(\"angle\", angle)\n  for (let i = 0; i < 4; i++){\n    const point = computeDestinationPoint(\n        { latitude: lat, longitude: lng },\n        hypot,\n        angle\n    );\n    polygon.push([point.latitude, point.longitude]);\n    console.log(\"POINT\", JSON.stringify(point))\n    angle = angle + 90;\n  }\n  console.log(\"POLYGON\", JSON.stringify(polygon))\n*/\n/*\n  const areaCheck = getAreaOfPolygon(polygon)\n  console.log(\"initial size: \", size, \"polygon size:\", areaCheck/10000)\n  return polygon\n*/\n}\n\nexport default class InteractiveMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      lat: this.props.lat,\n      lng: this.props.lng,\n      zoom: 1,\n      size: this.props.size,\n      maxSize: this.props.maxSize,\n      maxRadius: computeRadius(this.props.maxSize),\n      polygon: computePolygon(this.props.lat, this.props.lng, this.props.size),\n      radius: computeRadius(this.props.size),\n      rectangleBounds: [[this.props.lat, this.props.lng], [this.props.lat, this.props.lng]]\n    }\n    this.onFeatureGroupAdd = this.onFeatureGroupAdd.bind(this);\n  }\n\n\n  onFeatureGroupAdd = () => {\n    let bounds = this.refs.circle.leafletElement.getBounds()\n    let bounds2 = this.refs.circle2.leafletElement.getBounds()\n    bounds.getSouthWest().wrap();\n    bounds.getNorthEast().wrap();\n    bounds2.getSouthWest().wrap();\n    bounds2.getNorthEast().wrap();\n    this.setState({rectangleBounds: bounds2})\n    this.refs.map.leafletElement.fitBounds(bounds);\n    this.refs.rec.leafletElement.setBounds(bounds2);\n  }\n\n  /*\n  let bounds = this.refs.circle.leafletElement.getBounds()\n  bounds.getSouthWest().wrap();\n  bounds.getNorthEast().wrap();\n  let zoom = this.refs.map.leafletElement.getBoundsZoom(bounds);\n  console.log(\"ZOOM\", zoom);\n  this.refs.map.leafletElement.setZoom(zoom);\n  console.log(\"BOUNDS\", bounds);*/\n\n  componentDidUpdate(prevProps) {\n    if ((this.props.size !== prevProps.size)) {\n      this.setState({\n        size: this.props.size,\n        radius: computeRadius(this.props.size),\n      }, () => this.onFeatureGroupAdd());\n\n    }\n  }\n\n  /*\n  Alternative to re-rendering on key change..\n\n  componentDidUpdate(prevProps) {\n    if ((this.props.lat !== prevProps.lat) || (this.props.lng !== prevProps.lng) || (this.props.size !== prevProps.size)) {\n      this.setState({\n        lat: this.props.lat,\n        lng: this.props.lng,\n        size: this.props.size,\n        radius: computeRadius(this.props.size),\n        zoom: 8\n      });\n    }\n  }\n  */\n\n  render() {\n    const position = [this.state.lat, this.state.lng]\n    return (\n      <Map ref='map' zoomSnap={0.1} center={position} zoom={this.state.zoom}>\n      <FeatureGroup ref=\"features\" onAdd={this.onFeatureGroupAdd}>\n        <Circle ref=\"circle\" key={this.props.maxSize} center={[this.state.lat, this.state.lng]} fillColor=\"transparent\" color=\"transparent\" radius={this.state.maxRadius} />\n        <Circle ref=\"circle2\" key={this.props.size} center={[this.state.lat, this.state.lng]} fillColor=\"transparent\" color=\"transparent\" radius={this.state.radius} />\n        <Rectangle ref=\"rec\" bounds={this.state.rectangleBounds} fillColor=\"red\" color=\"red\" />\n      </FeatureGroup>\n        <TileLayer\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\n          url=\"https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}{r}.png\"\n        />\n\n      </Map>\n    )\n  }\n}\n","import React from 'react';\n\nexport const STATES = {\n  NSW: {\n    abr: \"NSW\",\n    label: \"nsw\",\n    description: \"NSW\"\n  },\n  VIC: {\n    abr: \"VIC\",\n    label: \"vic\",\n    description: \"VIC\"\n  },\n  AGG: {\n    abr: \"AGG\",\n    label: \"aggregate\",\n    description: \"both NSW & VIC\"\n  }\n}\n\nexport const MONTHS = {\n  1: \"Jan\",\n  2: \"Feb\",\n  3: \"Mar\",\n  4: \"Apr\",\n  5: \"May\",\n  6: \"Jun\",\n  7: \"Jul\",\n  8: \"Aug\",\n  9: \"Sep\",\n  10: \"Oct\",\n  11: \"Nov\",\n  12: \"Dec\"\n}\n\nexport const CITIES = {\n  MEL: {\n    name: \"Melbourne\",\n    abr: \"MEL\",\n    lat: -37.813629,\n    lng: 144.963058\n  },\n  SYD: {\n    name: \"Sydney\",\n    abr: \"SYD\",\n    lat: -33.868820,\n    lng: 151.209290\n  },\n  BNE: {\n    name: \"Brisbane\",\n    abr: \"BNE\",\n    lat: -27.469770,\n    lng: 153.025131\n  },\n  PER: {\n    name: \"Perth\",\n    abr: \"PER\",\n    lat: -31.950527,\n    lng: 115.860458\n  },\n  ADL: {\n    name: \"Adelaide\",\n    abr: \"ADL\",\n    lat: -34.928497,\n    lng: 138.600739\n  },\n  DRW: {\n    name: \"Darwin\",\n    abr: \"DRW\",\n    lat: -12.463440,\n    lng: 130.845642\n  },\n\n  HBA: {\n    name: \"Hobart\",\n    abr: \"HBA\",\n    lat: -42.882137,\n    lng: 147.128553\n  },\n  PAR: {\n    name: \"Paris\",\n    abr: \"PAR\",\n    lat: 48.856613,\n    lng: 2.352222\n  },\n  LCY: {\n    name: \"London\",\n    abr: \"LCY\",\n    lat: 51.507351,\n    lng: -0.127758\n  },\n  NYC: {\n    name: \"New York City\",\n    abr: \"NYC\",\n    lat: 40.712776,\n    lng: -74.005974\n  }\n}\n","import React from \"react\";\n\nexport const customStylesCity = {\n\tcontainer: styles => ({\n\t\t...styles,\n\t\twidth: '150px',\n\t\tmaxHeight: '31px',\n\t\theight: '31px',\n\t\t//marginBottom: '5px',\n\t}),\n\tcontrol: (styles, { isFocused, isDisabled }) => ({\n\t\t...styles,\n\t\twidth: '99%',\n\t\theight: '31px',\n\t\tminHeight: '31px',\n\t\tmaxHeight: '31px',\n\t\tbackgroundColor: 'white',\n\t\tborderRadius: '0px',\n\t\tboxShadow: '0px',\n\t\tborderWidth: isDisabled\n\t\t\t? '0px' : '1px',\n\t\tborderStyle: 'solid',\n    borderColor: '#ced4da',\n\t\tpaddingLeft: '8px',\n\t\tpaddingRight: '1px'\n\t}),\n\toption: (styles, { isSelected, isFocused }) => ({\n\t\t...styles,\n\t\theight: '31px',\n\t\tmaxHeight: '31px',\n\t\tfontSize: '.875rem',\n\t\tpaddingTop: '5px',\n\t\tpaddingBottom: '5px'\n\t}),\n\tinput: styles => ({\n\t\t...styles,\n\t\tfontSize: '.875rem',\n\n\t}),\n\tsingleValue: styles => ({\n\t\t...styles,\n\t\tfontSize: '1rem',\n\t\tcolor: '#495057',\n\t}),\n\tvalueContainer: styles => ({\n\t\t...styles,\n\t\tposition: 'none',\n\t\tpadding: '0px',\n\t}),\n\tindicatorsContainer: (styles, { isDisabled }) => ({\n\t\t...styles,\n\t\theight: '31px',\n\t\tmaxHeight: '31px',\n\t\tpadding: '0px',\n\t\tcolor: isDisabled ? 'transparent' : '#ced4da',\n\t}),\n  indicatorSeparator: (styles, { isDisabled }) => ({\n\t\t...styles,\n\t\tbackgroundColor: 'transparent',\n\t}),\n\tdropdownIndicator: (styles, { isDisabled }) => ({\n\t\t...styles,\n\t\tpaddingTop: '4px',\n\t\tpaddingRight: '4px',\n\t\tpaddingBottom: '4px',\n\t\tpaddingLeft: '4px',\n\t\tcolor: isDisabled ? 'transparent' : 'hsl(0,0%,60%)',\n\t}),\n\tplaceholder: (styles, { isDisabled }) => ({\n\t\t...styles,\n\t\theight: '21px',\n\t\tmaxHeight: '21px',\n\t\tfontSize: '1rem',\n\t\tcolor: isDisabled ? 'transparent' : '#ced4da',\n\t}),\n  menu: provided => ({ ...provided, zIndex: 9999 })\n};\n\nexport const customStylesState = {\n\tcontainer: styles => ({\n\t\t...styles,\n\t\twidth: '200px',\n\t\tmaxHeight: '31px',\n\t\theight: '31px',\n\t\t//marginBottom: '5px',\n\t}),\n\tcontrol: (styles, { isFocused, isDisabled }) => ({\n\t\t...styles,\n\t\twidth: '99%',\n\t\theight: '31px',\n\t\tminHeight: '31px',\n\t\tmaxHeight: '31px',\n\t\tbackgroundColor: 'white',\n\t\tborderRadius: '0px',\n\t\tboxShadow: '0px',\n\t\tborderWidth: isDisabled\n\t\t\t? '0px' : '1px',\n\t\tborderStyle: 'solid',\n\t\tborderColor: '#ced4da',\n\t\tpaddingLeft: '8px',\n\t\tpaddingRight: '0px'\n\t}),\n\toption: (styles, { isSelected, isFocused }) => ({\n\t\t...styles,\n\t\theight: '31px',\n\t\tmaxHeight: '31px',\n\t\tfontSize: '.875rem',\n\t\tpaddingTop: '5px',\n\t\tpaddingBottom: '5px'\n\t}),\n\tinput: styles => ({\n\t\t...styles,\n\t\tfontSize: '.875rem',\n\n\t}),\n\tsingleValue: styles => ({\n\t\t...styles,\n\t\tfontSize: '1rem',\n\t\tcolor: '#495057',\n\t}),\n\tvalueContainer: styles => ({\n\t\t...styles,\n\t\tposition: 'none',\n\t\tpadding: '0px',\n\t}),\n\tindicatorsContainer: (styles, { isDisabled }) => ({\n\t\t...styles,\n\t\theight: '31px',\n\t\tmaxHeight: '31px',\n\t\tpadding: '0px',\n\t\tcolor: isDisabled ? 'transparent' : '#ced4da',\n\t}),\n\tindicatorSeparator: (styles, { isDisabled }) => ({\n\t\t...styles,\n\t\tbackgroundColor: 'transparent',\n\t}),\n\tdropdownIndicator: (styles, { isDisabled }) => ({\n\t\t...styles,\n\t\tpaddingTop: '4px',\n\t\tpaddingRight: '4px',\n\t\tpaddingBottom: '4px',\n\t\tpaddingLeft: '4px',\n\t\tcolor: isDisabled ? 'transparent' : 'hsl(0,0%,60%)',\n\t}),\n\tplaceholder: (styles, { isDisabled }) => ({\n\t\t...styles,\n\t\theight: '21px',\n\t\tmaxHeight: '21px',\n\t\tfontSize: '.875rem',\n\t\tcolor: isDisabled ? 'transparent' : '#ced4da',\n\t}),\n  menu: provided => ({ ...provided, zIndex: 9999 })\n};\n","import React from \"react\";\nimport Select from 'react-select';\nimport {Form, FormGroup, Label, Button} from 'reactstrap';\nimport { CITIES, STATES } from '../enums'\nimport { customStylesCity, customStylesState} from './MapFormStyles.js'\n\nconst getCityOptions = () => {\n  let cityOptions = []\n  Object.keys(CITIES).map(key => cityOptions.push({\n    value: key,\n    label: CITIES[key].name\n  }))\n  console.log(JSON.stringify(cityOptions))\n  return cityOptions;\n};\n\nconst getStateOptions = () => {\n  let stateOptions = []\n  Object.keys(STATES).map(key => stateOptions.push({\n    value: key,\n    label: STATES[key].description\n  }))\n  console.log(JSON.stringify(stateOptions));\n  return stateOptions;\n};\n\n\n\nexport default class MapForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentStateOption: {value: this.props.options.target.abr, label: this.props.options.target.description},\n      stateOptions: getStateOptions(),\n      currentCityOption: {value: this.props.options.city.abr, label: this.props.options.city.name},\n      cityOptions: getCityOptions()\n    }\n  }\n\n  updateCityOption = option => {\n\t\tthis.setState({\n\t\t\tcurrentCityOption: option\n\t\t});\n    this.props.updateCitySelection(option.value)\n  }\n\n  updateStateOption = option => {\n\t\tthis.setState({\n\t\t\tcurrentStateOption: option\n\t\t});\n    this.props.updateStateSelection(option.value)\n  }\n\n  render() {\n    return (\n        <Form inline>\n        <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n          <Label className=\"mr-sm-2\">Showing the <b>&nbsp;total area of fires currently burning&nbsp;</b> in </Label>\n          <Select id=\"stateSelect\" options={this.state.stateOptions} onChange={this.updateStateOption.bind(this)} value={this.state.currentStateOption || \"\"} styles={customStylesState}/>\n        </FormGroup>\n        <FormGroup className=\"mb-2 mr-sm-2 mb-sm-0\">\n          <Label className=\"mr-sm-2\">over the city of:</Label>\n          <Select id=\"citySelect\" options={this.state.cityOptions} onChange={this.updateCityOption.bind(this)} value={this.state.currentCityOption || \"\"} styles={customStylesCity}/>\n        </FormGroup>\n      </Form>\n    )\n  }\n}\n","import React from \"react\";\nimport { MDBCard, MDBBtn, MDBIcon, MDBCardBody, MDBCardHeader, MDBTable, MDBTableBody } from \"mdbreact\";\nimport { CITIES, STATES, MONTHS } from '../enums';\n\n\nconst formatSize = (size) => {\n  let formatted = \"\";\n  if (size/1000000 > 1) {\n    let formatted = (size/1000000.00).toFixed(2).toString() + \"m\"\n    return formatted\n  } else {\n    let formatted = size.toLocaleString(undefined, {maximumFractionDigits:2})\n    return formatted\n  }\n}\n\n\nconst getDateObj = (dateString) => {\n    let msec = Date.parse(dateString);\n    let d = new Date(msec);\n    console.log(\"d\", d);\n    return d.toString();\n}\n\n\n\n\nconst getDateString = (dateString) => {\n  let msec = Date.parse(dateString);\n  let d = new Date(msec);\n  console.log(\"DDDDD\", d)\n  let month = (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear().toString().substring(2);\n  console.log(\"MONTH\", month);\n  let monthStr = MONTHS[month];\n\n  const date = monthStr + ' ' + day + ', ' + year;\n  //const date = [year, month, day].join('-');\n\n/*\n  if (month.length < 2)\n      month = '0' + month;\n  if (day.length < 2)\n      day = '0' + day;\n*/\n\n\n  //const timezone = d.getTimezoneOffset();\n\n  let hour = d.getHours(),\n        minute = d.getMinutes(),\n        //second = d.getSeconds(),\n        hourFormatted = hour % 12 || 12, // hour returned in 24 hour format\n        minuteFormatted = minute < 10 ? \"0\" + minute : minute,\n        ampm = hour < 12 ? \"am\" : \"pm\";\n\n  const time = hourFormatted + ':' + minuteFormatted  + ampm;\n\n  return [date, time].join(' at ');\n\n}\n\nexport default class Stats extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      target: this.props.target,\n      data: this.props.data,\n      size: formatSize(this.props.data.currentFires.area.total),\n      date: getDateString(this.props.data.currentFires.dateGenerated),\n      isOpen: this.props.isOpen\n\n    };\n    this.toggleCard = this.toggleCard.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if ((this.props.first !== prevProps.first)) {\n      setTimeout(() => {\n        this.setState({isOpen: this.props.isOpen});\n      }, 480);\n\n    }\n  }\n\n  toggleCard(){\n    const isOpen = !this.state.isOpen;\n    this.setState({isOpen});\n  }\n\n  render() {\n    let target = this.state.target;\n    return (\n      <MDBCard id=\"statsCard\">\n        <MDBCardHeader>\n          <span>{(target == \"aggregate\") ? \"Both VIC & NSW\"\n          : this.state.target.toUpperCase()}</span>\n          <button type=\"button\" className=\"btn btn-circle btn-circle-sm m-1\" id=\"collapseBtn\" onClick={this.toggleCard.bind(this)}>\n          {this.state.isOpen ? <i class=\"fa fa-chevron-up fa-sm\" id=\"upIcon\"></i>\n            : <i class=\"fa fa-chevron-down fa-sm\" id=\"downIcon\"></i>}</button>\n        </MDBCardHeader>\n        {this.state.isOpen ?\n          <MDBCardBody>\n          <MDBTable small borderless id=\"statsTable\">\n            <MDBTableBody>\n              <tr>\n                <td id=\"tableCol1\"><b>{this.state.size} ha</b></td>\n                <td id=\"tableCol2\">currently burning</td>\n              </tr>\n              <tr>\n                <td id=\"tableCol1\"><b>{this.state.data.currentFires.count.wildfire}</b></td>\n                <td id=\"tableCol2\">current wildfire incidences</td>\n              </tr>\n            </MDBTableBody>\n          </MDBTable>\n          <div id=\"statsTimestamp\">\n            <span id=\"statsTimestamp\">{\"LAST UPDATED: \" + this.state.date.toUpperCase()}</span>\n          </div>\n        </MDBCardBody>\n        : null}\n      </MDBCard>\n    )\n  }\n}\n","import React from 'react';\nimport { Row, Col, Card, CardBody, CardHeader, Container } from 'reactstrap';\nimport InteractiveMap from '../components/InteractiveMap';\nimport MapForm from '../components/MapForm';\nimport Stats from '../components/Stats';\nimport { MDBRow, MDBCol, MDBCard, MDBCardBody, MDBCardHeader, MDBContainer } from \"mdbreact\";\nimport { CITIES, STATES } from '../enums';\nimport FlipMove from 'react-flip-move';\n\n\nconst url = \"https://firedatacollator.emilylm.me\"\n\nconst ORDERS ={\n  aggregate: 1,\n  nsw: 2,\n  vic: 3\n}\n\nconst updateOrder = (target, order) => {\n  order.unshift(\n    order.splice(\n      order.findIndex(\n        item => item == target),\n    1)[0]\n  )\n\n  return order\n}\n\nconst StatsList = ({order, repos}) => (\n      <FlipMove\n      staggerDurationBy=\"30\"\n      duration={500}\n      enterAnimation={'fade'}\n      leaveAnimation={'fade'}>\n        {order.map(item => (\n          <Stats key={ORDERS[item]} target={item} data={repos[item]} isOpen={(item === order[0])} first={order[0]}/>\n        ))}\n      </FlipMove>\n);\n\nexport default class Homepage extends React.Component {\n  constructor(props) {\n  super(props);\n  this.state = {\n    data: undefined,\n    repos: {\n      aggregate: undefined,\n      nsw: undefined,\n      vic: undefined\n    },\n    options: {\n      target: STATES.AGG,\n      city: CITIES.PAR\n    },\n    order: ['aggregate', 'vic', 'nsw']\n  };\n\n  this.getDataAll = this.getDataAll.bind(this);\n  this.getData = this.getData.bind(this);\n  this.fetchJson = this.fetchJson.bind(this);\n  this.updateCitySelection = this.updateCitySelection.bind(this);\n  this.updateStateSelection = this.updateStateSelection.bind(this);\n  }\n\n\n  componentDidMount() {\n      this.getDataAll();\n      //To avoid using mock server too much in dev:\n      /*\n      let reposTemp = {}\n      reposTemp.vic = {currentFires:{count:{wildfire:90,nonWildfire:25,total:115},area:{total:1130550.72,unit:\"hectares\",unquantifiedFires:{smallAreaCount:6,mediumAreaCount:2,largeAreaCount:6,spotAreaCount:2,unknownAreaCount:0}},lastUpdated:\"2020-01-06T06:35:13.759Z\"}}\n      reposTemp.nsw = {currentFires:{count:{wildfire:151,nonWildfire:8,total:159},area:{total:3774232,unit:\"hectares\",unquantifiedFires:{zeroAreaCount:46}},lastUpdated:\"2020-01-06T06:35:18.792Z\"}}\n      reposTemp.aggregate = {\n      currentFires: {\n          count: {\n              wildfire: 241,\n              nonWildfire: 33,\n              total: 274\n          },\n          area: {\n              total: 4904782.72,\n              nsw: 3774232,\n              vic: 1130550.72,\n              unit: \"hectares\",\n              unquantifiedFires: {\n                  smallAreaCount: 6,\n                  mediumAreaCount: 2,\n                  largeAreaCount: 6,\n                  unknownAreaCount: 0,\n                  spotAreaCount: 2,\n                  zeroAreaCount: 46\n              }\n          },\n          lastUpdated: \"2020-01-05T07:20:38.519Z\"\n      }\n    }\n\n        this.setState({repos: reposTemp, data: {\n        currentFires: {\n            count: {\n                wildfire: 241,\n                nonWildfire: 33,\n                total: 274\n            },\n            area: {\n                total: 4904782.72,\n                nsw: 3774232,\n                vic: 1130550.72,\n                unit: \"hectares\",\n                unquantifiedFires: {\n                    smallAreaCount: 6,\n                    mediumAreaCount: 2,\n                    largeAreaCount: 6,\n                    unknownAreaCount: 0,\n                    spotAreaCount: 2,\n                    zeroAreaCount: 46\n                }\n            },\n            lastUpdated: \"2020-01-05T07:20:38.519Z\"\n        }\n      }})*/\n  }\n\n  updateCitySelection(key){\n    let prevOptions = this.state.options;\n    prevOptions.city = CITIES[key];\n    console.log(\"CITY\", JSON.stringify(prevOptions.city))\n    this.setState({options: prevOptions})\n  }\n\n  updateStateSelection(key){\n    let prevOptions = this.state.options;\n    let order = this.state.order;\n    prevOptions.target = STATES[key];\n    console.log(\"STATE\", JSON.stringify(prevOptions.target));\n    const option = STATES[key].label;\n    console.log(\"STATE OPTION\", option)\n    switch(option) {\n      case \"vic\":\n        order = updateOrder('vic', order)\n        console.log(\"ORDER\", JSON.stringify(order))\n        this.setState({\n          data: this.state.repos.vic,\n          options: prevOptions,\n          order\n        })\n        break;\n      case \"nsw\":\n        order = updateOrder('nsw', order)\n        console.log(\"ORDER\", JSON.stringify(order))\n        this.setState({\n          data: this.state.repos.nsw,\n          options: prevOptions,\n          order\n        })\n        break;\n      case \"aggregate\":\n        order = updateOrder('aggregate', order)\n        console.log(\"ORDER\", JSON.stringify(order))\n        this.setState({\n          data: this.state.repos.aggregate,\n          options: prevOptions,\n          order\n        })\n        break;\n    }\n  }\n\n\n  async getDataAll(){\n    const repos = {}\n    console.log(\"REPOS1\", JSON.stringify(repos))\n    const [aggregate, vic, nsw] = await Promise.all([\n      this.getData(\"aggregate\"),\n      this.getData(\"vic\"),\n      this.getData(\"nsw\")\n    ])\n    repos.aggregate = aggregate\n    repos.vic = vic\n    repos.nsw = nsw\n    console.log(\"REPOS2\", JSON.stringify(repos.aggregate));\n    this.setState({ repos: repos });\n  }\n\n\nasync fetchJson(url) {\n  let response = await fetch(url);\n  if (response.ok) {\n    return response.json();\n  } else {\n    throw new Error('Data fetch failed');;\n  }\n}\n\nasync getData(target) {\n  const query = `${url}/${target}`;\n  try {\n    let data = await this.fetchJson(query);\n    if (target == this.state.options.target.label){\n      this.setState({ data });\n      console.log(\"TARGET\", JSON.stringify(data))\n    }\n    return data;\n  } catch(err){\n    console.log(err)\n  }\n}\n\n\n\n  render() {\n    let key = []\n    if (this.state.data != undefined){\n      key = [this.state.options.city.lat, this.state.options.city.lng]\n    }\n    return (\n      <MDBContainer fluid id=\"homepageContainer\">\n        <MDBRow>\n          <MDBCol id=\"col1\">\n          <MDBCard className=\"rounded-0\" id=\"sidebarHead\">\n            <MDBCardBody>\n            <span id=\"shContent\">STATS</span>\n            </MDBCardBody>\n          </MDBCard>\n            <MDBCard className=\"rounded-0\" id=\"sidebarCard\">\n              <MDBCardBody>\n              { ((this.state.repos.nsw != undefined) && (this.state.repos.nsw != undefined) && (this.state.repos.nsw != undefined)) ?\n              <StatsList order={this.state.order} repos={this.state.repos}/>\n              : null\n              }\n              </MDBCardBody>\n            </MDBCard>\n          </MDBCol>\n          <MDBCol>\n            <MDBRow id=\"row2\">\n              <MDBCol>\n              <MDBCard className=\"rounded-0\" id=\"mapHeaderCard\">\n                <MDBCardBody>\n                  <MapForm options={this.state.options} updateStateSelection={this.updateStateSelection} updateCitySelection={this.updateCitySelection}/>\n                </MDBCardBody>\n              </MDBCard>\n              </MDBCol>\n            </MDBRow>\n            <MDBRow>\n              <MDBCol>\n                <MDBCard className=\"rounded-0\" id=\"mapCard\">\n                  <MDBCardBody>\n                    {((this.state.data != undefined) &&  (this.state.repos.aggregate != undefined)) ?\n                    <InteractiveMap key={key} size={this.state.data.currentFires.area.total} lat={this.state.options.city.lat} lng={this.state.options.city.lng} maxSize={this.state.repos.aggregate.currentFires.area.total}/>\n                    : null}\n                  </MDBCardBody>\n                </MDBCard>\n              </MDBCol>\n            </MDBRow>\n          </MDBCol>\n        </MDBRow>\n      </MDBContainer>\n    )\n  }\n}\n","import React, { Component } from \"react\";\nimport { MDBNavbar, MDBNavbarBrand, MDBNavbarNav, MDBNavItem, MDBNavLink, MDBNavbarToggler, MDBCollapse, MDBDropdown,\nMDBDropdownToggle, MDBDropdownMenu, MDBDropdownItem, MDBIcon } from \"mdbreact\";\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport Homepage from '../pages/Homepage'\nimport Stats from '../components/Stats'\n\n\nclass Navbar extends Component {\nstate = {\n  isOpen: false\n};\n\ntoggleCollapse = () => {\n  this.setState({ isOpen: !this.state.isOpen });\n}\n\nrender() {\n  return (\n    <Router>\n      <MDBNavbar color=\"mdb-color darken-3\" dark expand=\"md\">\n        <MDBNavbarBrand>\n          <MDBNavLink to=\"/bushfire-collator-client/\"> <strong className=\"white-text\">Bushfire Area Map</strong></MDBNavLink>\n        </MDBNavbarBrand>\n        <MDBNavbarToggler onClick={this.toggleCollapse} />\n        <MDBCollapse id=\"navbarCollapse3\" isOpen={this.state.isOpen} navbar>\n          <MDBNavbarNav right>\n            <MDBNavItem>\n              <MDBNavLink className=\"waves-effect waves-light\" to=\"#!\">\n                <MDBIcon icon=\"info-circle\" />\n              </MDBNavLink>\n            </MDBNavItem>\n            <MDBNavItem>\n              <MDBNavLink className=\"waves-effect waves-light\" to=\"#!\">\n                <MDBIcon fab icon=\"github\" />\n              </MDBNavLink>\n            </MDBNavItem>\n          </MDBNavbarNav>\n        </MDBCollapse>\n      </MDBNavbar>\n\n      <div id=\"page-content\">\n          <Route exact path=\"/bushfire-collator-client/\" >\n            <Homepage />\n          </Route>\n      </div>\n    </Router>\n    );\n  }\n}\n\nexport default Navbar;\n","import React from 'react';\nimport './App.css';\nimport Navigation from './layouts/Navigation'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navigation/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"@fortawesome/fontawesome-free/css/all.min.css\";\nimport \"bootstrap-css-only/css/bootstrap.min.css\";\nimport \"mdbreact/dist/css/mdb.css\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}